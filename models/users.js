// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Users = sequelize.define('users', {
    firstname: {
      type: DataTypes.STRING,
    },
    lastname: {
      type: DataTypes.STRING,
    },
    birthday: {
      type: DataTypes.DATE,
    },
    gender: {
      type: DataTypes.ENUM(
        'male',
        'female',
      ),
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    deletedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'users',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Users.associate = (models) => {
    Users.hasMany(models.agencies, {
      foreignKey: {
        name: 'administratorIdKey',
        field: 'administrator_id',
      },
      as: 'administratorAgencies',
    });
    Users.hasMany(models.driverLicences, {
      foreignKey: {
        name: 'userIdKey',
        field: 'user_id',
      },
      as: 'driverLicences',
    });
    Users.hasMany(models.cars, {
      foreignKey: {
        name: 'ownerIdKey',
        field: 'owner_id',
      },
      as: 'ownerCars',
    });
    Users.hasMany(models.drives, {
      foreignKey: {
        name: 'driverIdKey',
        field: 'driver_id',
      },
      as: 'driverDrives',
    });
    Users.hasMany(models.drives, {
      foreignKey: {
        name: 'moderatorIdKey',
        field: 'moderator_id',
      },
      as: 'moderatorDrives',
    });
  };

  return Users;
};
